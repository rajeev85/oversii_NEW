

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Oversii.Models.DB
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class oversiiEntities : DbContext
{
    public oversiiEntities()
        : base("name=oversiiEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Audittrail> Audittrails { get; set; }

    public virtual DbSet<AuditTrailUpdation> AuditTrailUpdations { get; set; }

    public virtual DbSet<Citation> Citations { get; set; }

    public virtual DbSet<Email> Emails { get; set; }

    public virtual DbSet<House> Houses { get; set; }

    public virtual DbSet<ManagerRequest> ManagerRequests { get; set; }

    public virtual DbSet<Permit> Permits { get; set; }

    public virtual DbSet<PermitPayment> PermitPayments { get; set; }

    public virtual DbSet<PermitStatus> PermitStatus { get; set; }

    public virtual DbSet<Phone> Phones { get; set; }

    public virtual DbSet<Property> Properties { get; set; }

    public virtual DbSet<PropertyHistoryTrackingType> PropertyHistoryTrackingTypes { get; set; }

    public virtual DbSet<PropertyManagement> PropertyManagements { get; set; }

    public virtual DbSet<PropertyManager> PropertyManagers { get; set; }

    public virtual DbSet<ProperytViolation> ProperytViolations { get; set; }

    public virtual DbSet<Resident> Residents { get; set; }

    public virtual DbSet<ResidentStatu> ResidentStatus { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Street> Streets { get; set; }

    public virtual DbSet<SubDivision> SubDivisions { get; set; }

    public virtual DbSet<SubDivisionManager> SubDivisionManagers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Varience> Variences { get; set; }

    public virtual DbSet<VarienceStatu> VarienceStatus { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleColor> VehicleColors { get; set; }

    public virtual DbSet<VehicleMake> VehicleMakes { get; set; }

    public virtual DbSet<ViolationList> ViolationLists { get; set; }

    public virtual DbSet<State> States { get; set; }


    public virtual ObjectResult<AuthenticateUser_Result> AuthenticateUser(string email, string password)
    {

        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthenticateUser_Result>("AuthenticateUser", emailParameter, passwordParameter);
    }


    public virtual ObjectResult<VehicleMake> GetVehicleMake()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VehicleMake>("GetVehicleMake");
    }


    public virtual ObjectResult<VehicleMake> GetVehicleMake(MergeOption mergeOption)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VehicleMake>("GetVehicleMake", mergeOption);
    }


    public virtual ObjectResult<VehicleColor> GetVehicleColor()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VehicleColor>("GetVehicleColor");
    }


    public virtual ObjectResult<VehicleColor> GetVehicleColor(MergeOption mergeOption)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VehicleColor>("GetVehicleColor", mergeOption);
    }


    public virtual int ApplyPermit(Nullable<int> vehicleMakeID, Nullable<int> vehicleColorID, Nullable<int> residentID, Nullable<short> makeYear, string licPlateNum, Nullable<int> stateID)
    {

        var vehicleMakeIDParameter = vehicleMakeID.HasValue ?
            new ObjectParameter("VehicleMakeID", vehicleMakeID) :
            new ObjectParameter("VehicleMakeID", typeof(int));


        var vehicleColorIDParameter = vehicleColorID.HasValue ?
            new ObjectParameter("VehicleColorID", vehicleColorID) :
            new ObjectParameter("VehicleColorID", typeof(int));


        var residentIDParameter = residentID.HasValue ?
            new ObjectParameter("ResidentID", residentID) :
            new ObjectParameter("ResidentID", typeof(int));


        var makeYearParameter = makeYear.HasValue ?
            new ObjectParameter("MakeYear", makeYear) :
            new ObjectParameter("MakeYear", typeof(short));


        var licPlateNumParameter = licPlateNum != null ?
            new ObjectParameter("LicPlateNum", licPlateNum) :
            new ObjectParameter("LicPlateNum", typeof(string));


        var stateIDParameter = stateID.HasValue ?
            new ObjectParameter("StateID", stateID) :
            new ObjectParameter("StateID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApplyPermit", vehicleMakeIDParameter, vehicleColorIDParameter, residentIDParameter, makeYearParameter, licPlateNumParameter, stateIDParameter);
    }


    public virtual ObjectResult<State> GetState()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<State>("GetState");
    }


    public virtual ObjectResult<State> GetState(MergeOption mergeOption)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<State>("GetState", mergeOption);
    }

}

}

